import json
import asyncio
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

DATA_FILE = "user_subscriptions.json"
ADMIN_IDS = [468994162]

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /subscribe YYYY-MM-DD —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.chat_id)
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–∏–º–µ—Ä: /subscribe 2025-08-15")
        return
    try:
        end_date = context.args[0]
        datetime.strptime(end_date, "%Y-%m-%d")
        data = load_data()
        data[user_id] = end_date
        save_data(data)
        await update.message.reply_text(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {end_date}")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π: /subscribe 2025-08-15")

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    data = load_data()
    if not data:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    message = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n"
    for uid, date in data.items():
        message += f"üë§ {uid} ‚Äî –¥–æ {date}\n"
    await update.message.reply_text(message)

async def check_subscriptions(application):
    while True:
        today = datetime.now().date()
        data = load_data()
        for user_id, end_date_str in data.items():
            try:
                end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()
                if end_date - today == timedelta(days=3):
                    await application.bot.send_message(chat_id=int(user_id),
                        text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è ({end_date})!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await asyncio.sleep(86400)

async def main():
    app = ApplicationBuilder().token("8169403134:AAGsWrSYeaFsTDC2VRYyTP5JjTWQbwmEt6Y").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("list", list_users))

    asyncio.create_task(check_subscriptions(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())